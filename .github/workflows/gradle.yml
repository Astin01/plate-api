# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set PROP
      run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROP }}" | base64 --decode > src/main/resources/application.properties
          find src
          
    - name: Set PROD_PROP
      run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROD }}" | base64 --decode > src/main/resources/application-prod.properties
          find src
          
    - name: Set TEST_PROP
      run: |
          echo "${{ secrets.APPLICATION_TEST }}" | base64 --decode > src/main/resources/application-test.properties
          find src
          
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
        
    - name: Build
      run: ./gradlew build

    - name: docker image build
      run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/zero-plate-api .

    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: docker Hub push
      run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/zero-plate-api

    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'main')
      with:
        host: ${{ secrets.HOST_PROD }}
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }}
        envs: GITHUB_SHA
        script: |
          sudo docker ps
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/zero-plate-api
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/zero-plate-api
          sudo docker image prune -f
